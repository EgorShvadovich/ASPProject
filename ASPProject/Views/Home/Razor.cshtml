@{
    ViewData["Title"] = "Razor";
}

<div class="text-center">
    <h1 class="display-4">Введение в Razor</h1>

</div>
<p>
    Одной из необходимых задач серверной разработки является расширение
    ыозможностей HTML с дополнением его алгоритмическими конструкциями.
    В АSР исторически использовались спецтеги &lt;asp, однако им на смену пришел
    синтаксис Razer
</p>
<p>
    <b>Razor</b> - специальный инструмент для включения в хтмл с# кода.
    Файлы с данными инструкциями имеют файл расширения .CSHTML
    Данные файлы "заполняются" на сервере,в браузер приходит чистый хтмл(без спецконструкций)
    Основными командным символом Razer является &commat;
    поэтому в хтмл для его вставки используется сущность <b>&amp;commat;</b>


</p>
<h3>Выражения</h3>
<p>
    Выражении (в программировании) - инструкция, имеющая результат
    Razor позволяет вычислять выражения и выводить их результат в хтмл
    при помощи конструкции &commat;():<br />
    <code>
        &commat;(2 + 3) = @(2 + 3)
    </code>
    В простых выражениях круглые скобки можно не ставить,однако тогда границы выражения определяют Razor и не всегда так,как хотелось бы нам

</p>
<h3>Блоки кода</h3>
<p>
    Инструкции,не требующие вывода результатов в HTML,помещаются в блоки &commat;{}.
    В этих блоках возможны практически любые команды .NET(c#)
    Однако,применение лишней активности в представлениях не рекомендуется
    паттерном MVC
</p>
<p>
    @{
        int x = 10;
        x += 5;
    }
    x = @x
</p>
<h3>Условная верстка</h3>
<p>
    Средствами Razor можно создавать(или не создавать) блоки верстки в зависимости
    от программных условий.Для этого использкется комманда &commat;if(){}
    Для множественного выбора можно использовать &commat;sweatch(){}
</p>
@if (x < 10)
{
    <b>Этот блок будет при х &lt; 10</b>
}
else
{
    <b>Этот блок будет при х &ge; 10</b>
}
<h3>Циклическая верстка</h3>
<p>
    Основа современных сайтов - работа с массивами данных.
    В Razor есть все виды циклов с#
    &commat;for(){}
    &commat;while(){}
    &commat;foreach(){}
</p>
@{
    string[] s = new string[5] { "1", "2", "3", "4", "5" };
}
@for (int i = 0; i < s.Length; i++)
{
    int j = i + 1;
    <p>@j. @s[i]</p>
}
<ul>
    @for (int i = 0; i < s.Length; i++)
    {
        int j = i + 1;
        <li>@j. @s[i]</li>
    }
</ul>
<table>
    <tbody>

        @for (int i = 0; i < s.Length; i++)
        {
            int j = i + 1;
            <tr>
                <td>@j. </td>
                <td>@s[i]</td>
            </tr>
        }

    </tbody>
</table>
<br />
@for (int i = 0; i < s.Length; i++)
{
    int j = i + 1;
    <div>@j. @s[i]</div>
}
