@using ASPProject.Services
@inject IDateService dateService
@inject TimeService timeService
@inject DateTimeService dateTimeService
@inject Validation validation
@{
    ViewData["Title"] = "Services";
}

<div class="text-center">
    <h1 class="display-4">Службы и зависимости</h1>
</div>

<p>
    SOLID - набор рекомендаций по архитектурной композиции проекта.
    <b>D</b> (DIP) - принцип инверсии зависимостей.Принцип рекомендует
    не создавать зависимости от реализаций,а использовать для этого 
    абстракции - интерфейсы
</p>
<p>
    Службы (в ООП) - объекты глобального типа, доступные из различных
    частей проекта.В отличии от глобальных переменных службы имеют различные
    области существования (Scope)<br />
    <b>Singleton</b> - максимальное время существования,различные объекты получают
    ссылку на один и тот же объект службы.
    <b>Scoped</b> - время существования в течении обработки запроса(как у конструктора).
    С новым запросом создается новый объект.
    <b>Transient</b> - каждое орбращение к службе создает новый объект,
    в разных точках инъекции объекты всегда разные
</p>
<p>
    Работа со службами состоит из нескольких этапов
</p>
<ul>
    <li>Традиционно, службы помещаются в отдельную папку</li>
    <li>Описываются классы служб, их методы</li>
    <li>
        Классы регистрируются в контейнере служб (в Програм.цс между
        <code>var builder = ...</code> и <code>var app = builder.Build();</code>)
    </li>
    <li>
        Службы запрашиваются в других объектах, чаще всего - в контроллерах.
        По умолчанию в первом контроллере подключается служба логирования,можно использовать
        ее как пример
    </li>
    <li>
        Также службы могут инжектироваться в представления, Razor имеет для этого
        инструкцию &commat;inject
    </li>
</ul>
<p>
    Как это работает:
    Program.cs выполняется один раз при старте сервера (запуск приложения).
    В этот момент происходит регестрация всех служб (но объекты пока не создаются).
    Контроллеры пересоздаются каждый раз при новом запросе,
    при создании происходит запрос на объект службы и в этот момент он будет создаваться / либо использоваться ранее созданный объект службы.
</p>
<p>
    Для контроля новых\старых объектов можно использовать хеш-коды.
</p>
<table>
    <thread>
        <tr>
            <th>Служба</th>
            <th>Хеш-код(в контроллере)</th>
            <th>Хеш-код(в представлении)</th>
            <th>Комментарий</th>
        </tr>
    </thread>
    <tbody>
        <tr>
            <td>HomeController</td>
            <td>@ViewData["ctrl-hash"]</td>
            <td>----</td>
            <td>Изменяется при обновлении страницы</td>
        </tr>
        <tr>
            <td>DateService</td>
            <td>@ViewData["date-hash"]</td>
            <td>@dateService.GetHashCode()</td>
            <td>Singleton - не изменяется при обновлениях(только при перезапуске)</td>
        </tr>
        <tr>
            <td>TimeService</td>
            <td>@ViewData["time-hash"]</td>
            <td>@timeService.GetHashCode()</td>
            <td>Scope - изменяется при обновлениях,но одинаковый во всех местах</td>
        </tr>
        <tr>
            <td>DateTimeService</td>
            <td>@ViewData["datetime-hash"]</td>
            <td>@dateTimeService.GetHashCode()</td>
            <td>Transient - изменяется во всех местах и при обновлениях</td>
        </tr>
    </tbody>
</table>
<br />
<p>
    Данные от службы DateService: <b>@ViewData["date"]</b>
</p>
<p>
    Данные от службы DateService: <b>@ViewData["time"]</b>
</p>
<p>
    Данные от службы DateService: <b>@ViewData["datetime"]</b>
</p>
<p>
    <b>Validation:</b>
</p>


@{
    var correct = ViewData["validation"] as bool[];
    for (int i = 0; i < correct.Length; i++)
    {

        <p>@correct[i]</p>

    }
}



